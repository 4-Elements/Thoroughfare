"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThrottledAnalytics = exports.ToggleableAnalytics = exports.NoopAnalytics = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
class Queue {
    constructor(applyFn) {
        this.applyFn = applyFn;
        this.queue = [];
        this.state = 'paused';
    }
    push(val) {
        switch (this.state) {
            case 'paused':
                this.queue.push(val);
                return;
            case 'enabled':
                this.applyFn(val);
                return;
            case 'disabled':
            default:
                return;
        }
    }
    enable() {
        this.state = 'enabled';
        const queue = this.queue;
        this.queue = [];
        queue.forEach((val) => {
            this.applyFn(val);
        });
    }
    disable() {
        this.state = 'disabled';
        this.queue = [];
    }
    pause() {
        this.state = 'paused';
    }
    getState() {
        return this.state;
    }
}
class NoopAnalytics {
    identify(_info) { }
    track(_info) { }
    flush(cb) {
        cb();
    }
}
exports.NoopAnalytics = NoopAnalytics;
class ToggleableAnalytics {
    constructor(target = new NoopAnalytics()) {
        this._queue = new Queue((item) => {
            if (item[0] === 'identify') {
                this._target.identify(...item[1]);
            }
            if (item[0] === 'track') {
                this._target.track(...item[1]);
            }
        });
        this._target = target;
    }
    identify(...args) {
        this._validateArgs(args);
        this._queue.push(['identify', args]);
    }
    track(...args) {
        this._validateArgs(args);
        this._queue.push(['track', args]);
    }
    enable() {
        if (this._pendingError) {
            throw this._pendingError;
        }
        this._queue.enable();
    }
    disable() {
        this._pendingError = undefined;
        this._queue.disable();
    }
    pause() {
        this._queue.pause();
    }
    _validateArgs([firstArg]) {
        var _a;
        if (!('userId' in firstArg && firstArg.userId) &&
            !('anonymousId' in firstArg && firstArg.anonymousId)) {
            const err = new Error('Telemetry setup is missing userId or anonymousId');
            switch (this._queue.getState()) {
                case 'enabled':
                    throw err;
                case 'paused':
                    (_a = this._pendingError) !== null && _a !== void 0 ? _a : (this._pendingError = err);
                    break;
                default:
                    break;
            }
        }
    }
    flush(callback) {
        return this._target.flush(callback);
    }
}
exports.ToggleableAnalytics = ToggleableAnalytics;
async function lockfile(filepath, staleDuration = 43200000) {
    var _a;
    let intervalId;
    const lockfilePath = `${filepath}.lock`;
    const unlock = async () => {
        clearInterval(intervalId);
        try {
            return await fs_1.default.promises.rmdir(lockfilePath);
        }
        catch (_a) {
        }
    };
    try {
        await fs_1.default.promises.mkdir(lockfilePath);
        intervalId = setInterval(() => {
            const now = Date.now();
            fs_1.default.promises.utimes(lockfilePath, now, now).catch(() => { });
        }, staleDuration / 2);
        (_a = intervalId.unref) === null || _a === void 0 ? void 0 : _a.call(intervalId);
        return unlock;
    }
    catch (e) {
        if (e.code !== 'EEXIST') {
            throw e;
        }
        const stats = await fs_1.default.promises.stat(lockfilePath);
        if (Date.now() - stats.mtimeMs > staleDuration) {
            await fs_1.default.promises.rmdir(lockfilePath);
            return lockfile(filepath, staleDuration);
        }
        throw new Error(`File ${filepath} already locked`);
    }
}
class ThrottledAnalytics {
    constructor({ target, throttle } = {}) {
        this.trackQueue = new Queue((message) => {
            if (this.shouldEmitAnalyticsEvent()) {
                this.target.track(message);
                this.throttleState.count++;
            }
        });
        this.target = new NoopAnalytics();
        this.currentUserId = null;
        this.throttleOptions = null;
        this.throttleState = { count: 0, timestamp: Date.now() };
        this.restorePromise = Promise.resolve();
        this.unlock = () => Promise.resolve();
        this.target = target !== null && target !== void 0 ? target : this.target;
        this.throttleOptions = throttle !== null && throttle !== void 0 ? throttle : this.throttleOptions;
    }
    get metadataPath() {
        if (!this.throttleOptions) {
            throw new Error('Metadata path is not avaialble if throttling is disabled');
        }
        if (!this.currentUserId) {
            throw new Error('Metadata path is not avaialble if userId is not set');
        }
        const { throttleOptions: { metadataPath }, currentUserId: userId, } = this;
        return path_1.default.resolve(metadataPath, `am-${userId}.json`);
    }
    identify(message) {
        var _a;
        if (this.currentUserId) {
            throw new Error('Identify can only be called once per user session');
        }
        this.currentUserId = (_a = message.userId) !== null && _a !== void 0 ? _a : message.anonymousId;
        this.restorePromise = this.restoreThrottleState().then((enabled) => {
            if (!enabled) {
                this.trackQueue.disable();
                return;
            }
            if (this.shouldEmitAnalyticsEvent()) {
                this.target.identify(message);
                this.throttleState.count++;
            }
            this.trackQueue.enable();
        });
    }
    track(message) {
        this.trackQueue.push(message);
    }
    async restoreThrottleState() {
        if (!this.throttleOptions) {
            return true;
        }
        if (!this.currentUserId) {
            throw new Error('Trying to restore throttle state before userId is set');
        }
        try {
            this.unlock = await lockfile(this.metadataPath, this.throttleOptions.lockfileStaleDuration);
        }
        catch (e) {
            return false;
        }
        try {
            this.throttleState = JSON.parse(await fs_1.default.promises.readFile(this.metadataPath, 'utf8'));
        }
        catch (e) {
            if (e.code !== 'ENOENT') {
                return false;
            }
        }
        return true;
    }
    shouldEmitAnalyticsEvent() {
        var _a;
        if (!this.throttleOptions) {
            return true;
        }
        if (Date.now() - this.throttleState.timestamp >
            ((_a = this.throttleOptions.timeframe) !== null && _a !== void 0 ? _a : 60000)) {
            this.throttleState.timestamp = Date.now();
            this.throttleState.count = 0;
            return true;
        }
        return this.throttleState.count < this.throttleOptions.rate;
    }
    flush(callback) {
        if (!this.throttleOptions) {
            this.target.flush(callback);
            return;
        }
        if (!this.currentUserId) {
            callback(new Error('Trying to persist throttle state before userId is set'));
            return;
        }
        this.restorePromise.finally(async () => {
            try {
                await fs_1.default.promises.writeFile(this.metadataPath, JSON.stringify(this.throttleState));
                await this.unlock();
                this.target.flush(callback);
            }
            catch (e) {
                callback(e);
            }
        });
    }
}
exports.ThrottledAnalytics = ThrottledAnalytics;
//# sourceMappingURL=analytics-helpers.js.map