/// <reference types="node" />
/// <reference types="node" />
import type { ReadLineOptions } from 'readline';
import type { ReplOptions, REPLServer } from 'repl';
import { start as originalStart } from 'repl';
export type OriginalEvalFunction = (input: string, context: any, filename: string) => Promise<any>;
export type AsyncEvalFunction = (originalEval: OriginalEvalFunction, input: string, context: any, filename: string) => Promise<any>;
export type AsyncREPLOptions = ReadLineOptions & Omit<ReplOptions, 'eval' | 'breakEvalOnSigint'> & {
    start?: typeof originalStart;
    wrapCallbackError?: (err: Error) => Error;
    asyncEval: AsyncEvalFunction;
    onAsyncSigint?: () => Promise<boolean> | boolean;
};
export type EvalStartEvent = {
    input: string;
};
export type EvalFinishEvent = EvalStartEvent & ({
    success: true;
} | {
    success: false;
    err: unknown;
    recoverable: boolean;
});
export declare const evalStart: unique symbol;
export declare const evalFinish: unique symbol;
export declare function start(opts: AsyncREPLOptions): REPLServer;
